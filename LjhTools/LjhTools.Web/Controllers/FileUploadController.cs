using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace LjhTools.Web.Controllers
{
    public class FileUploadController : Controller
    {
        //
        // GET: /FileUpload/

        public ActionResult Index()
        {
            return View();
        }

        /// C#与http服务器端进行对接的工具类
        /// 用于缓存服务器端传输到客户端的SESSIONID或者JSESSIONID
        ///private Cookie sessionidCookie = null;
        /// 向HttpWebServer端上传文件(使用的是"post"方式)////// 请求网址/// 请求参数集合，无需参数时传入null值/// 请求cookie集合，无需cookie时传入null值/// 上传文件集合《控件名,上传文件的保存位置(包括"文件名"."扩展名")》,无需上传时传入null值/// 返回请求结果字符串，返回为null代表请求失败public String setFilesToHttpWebServer(String url, Hashtable data, CookieCollection cookies, Hashtable filesSaveAddress){//用于缓存服务器端传输回来的结果字符串string result = null;if (string.IsNullOrEmpty(url)){return null;//传入参数异常}//用于分割信息部分的分隔符(不能与消息原文冲突)String boundary = "HttpWebTool" + DateTime.Now.Ticks;//结束分隔符数据流byte[] andBoundary = Encoding.UTF8.GetBytes("--" + boundary + "--");//新行字符串数据流byte[] newline = Encoding.UTF8.GetBytes("\r\n");try{HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(url);//请求方式req.Method = "POST";//声明客户端只接收txt类型的内容req.Accept = "text/plain";//以消息的形式向服务器传递参数和数据流req.ContentType = "multipart/form-data; boundary=" + boundary;//设置cookie盒子(客户端请求的cookie和服务器端返回的cookie就放在此盒子中)CookieContainer cookieContainer = new CookieContainer();if (sessionidCookie != null && !string.IsNullOrEmpty(sessionidCookie.Domain)){cookieContainer.Add(sessionidCookie);}if (cookies != null){cookieContainer.Add(cookies);//添加调用者传入的cookie集合}req.CookieContainer = cookieContainer;//用于累计数据流长度，初始化为0long dataCount = 0;byte[] parameterBytes = getParameterBytes(data, boundary);if (parameterBytes != null && parameterBytes.Length>0){//累计请求参数字符串数据流大小dataCount += parameterBytes.Length;}//<控件名，上传文件的消息头部分字符流byte[]>Hashtable uploadFileDeclareBytesSet = new Hashtable();//如果有要上传的文件if (filesSaveAddress != null && filesSaveAddress.Count > 0){foreach (DictionaryEntry de in filesSaveAddress){//如果将要上传的文件存在if (File.Exists(de.Value.ToString())){byte[] uploadFileDeclareBytes = getUploadFileDeclareBytes(de, boundary);if (uploadFileDeclareBytes!=null){//累计上传文件消息头部描述字符串数据流大小dataCount += uploadFileDeclareBytes.Length;//累计上传文件正文数据流大小dataCount += new FileInfo(de.Value.ToString()).Length;//累计新行字符串数据流数据流大小dataCount += newline.Length;uploadFileDeclareBytesSet.Add(de.Key.ToString(), uploadFileDeclareBytes);}}}}//如果有数据流if (dataCount>0){//累计结束分隔符数据流大小dataCount += andBoundary.Length;//请求数据流的长度req.ContentLength = dataCount;using (Stream requestStream = req.GetRequestStream()){if (parameterBytes != null && parameterBytes.Length > 0){requestStream.Write(parameterBytes, 0, parameterBytes.Length);}if (filesSaveAddress != null && filesSaveAddress.Count > 0){foreach (DictionaryEntry de in filesSaveAddress){if (File.Exists(de.Value.ToString())){byte[] uploadFileDeclareBytes = (byte[])uploadFileDeclareBytesSet[de.Key.ToString()];requestStream.Write(uploadFileDeclareBytes, 0, uploadFileDeclareBytes.Length);using (FileStream fileStream = new FileStream(de.Value.ToString(), FileMode.Open, FileAccess.Read)){//建立字节组，并设置它的大小是多少字节byte[] bytes = new byte[10240];int n = -1;while ((n = fileStream.Read(bytes, 0, bytes.Length)) > 0){requestStream.Write(bytes, 0, n);　//将指定字节的流信息写入文件流中}}requestStream.Write(newline, 0, newline.Length);}}}requestStream.Write(andBoundary, 0, andBoundary.Length);}}//接收返回值using (HttpWebResponse myResponse = (HttpWebResponse)req.GetResponse()) {using (StreamReader reader = new StreamReader(myResponse.GetResponseStream(), Encoding.UTF8)) {result = reader.ReadToEnd().Trim();}if (myResponse.Cookies["SESSIONID"] != null){sessionidCookie = myResponse.Cookies["SESSIONID"];}else{if (myResponse.Cookies["JSESSIONID"] != null){sessionidCookie = myResponse.Cookies["JSESSIONID"];}}}}catch (Exception){Console.WriteLine("请查看传入参数是否正确或者服务器是否关闭");}return result;}/// 获得参数data的消息数据流，以"\r\n"结尾////// 请求参数集合，无需参数时传入null值/// 消息分隔符/// 返回参数data的数据流，返回为空代表获得失败private byte[] getParameterBytes(Hashtable data, String boundary){byte[] parameterBytes = null;//如果有请求参数if (data != null && data.Count > 0){string parameterStr = "";foreach (DictionaryEntry de in data){parameterStr += "--" + boundary;parameterStr += "\r\n" + "Content-Disposition: form-data;name=\"" + de.Key.ToString() + "\"";parameterStr += "\r\n" + "Content-Type: text/plain; charset=UTF-8";parameterStr += "\r\n\r\n" + de.Value.ToString();parameterStr += "\r\n";}if (!string.IsNullOrEmpty(parameterStr)){parameterBytes = Encoding.UTF8.GetBytes(parameterStr);//将上传字符串数据打包成数据流}}return parameterBytes;}/// 获得上传文件的消息头部分字符流，以"\r\n\r\n"结尾////// 上传文件《控件名,上传文件的保存位置(包括"文件名"."扩展名")》/// 消息分隔符/// 返回上传文件的消息头部分字符流，返回会为null代表获得失败private byte[] getUploadFileDeclareBytes(DictionaryEntry de, String boundary){byte[] uploadFileDeclareBytes = null;//上传文件的消息头描述部分string uploadFileDeclareStr = "";uploadFileDeclareStr += "--" + boundary;uploadFileDeclareStr += "\r\n" + "Content-Disposition: form-data;name=\"" + de.Key.ToString() + "\"; filename=\"" + de.Value.ToString() + "\"";uploadFileDeclareStr += "\r\n" + "Content-Type: application/octet-stream";uploadFileDeclareStr += "\r\n\r\n";if (!string.IsNullOrEmpty(uploadFileDeclareStr)){uploadFileDeclareBytes = Encoding.UTF8.GetBytes(uploadFileDeclareStr);//将上传字符串数据打包成数据流}return uploadFileDeclareBytes;}}}


    }
}
